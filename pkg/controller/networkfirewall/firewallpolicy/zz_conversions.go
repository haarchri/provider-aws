/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package firewallpolicy

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/networkfirewall"

	svcapitypes "github.com/crossplane/provider-aws/apis/networkfirewall/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeFirewallPolicyInput returns input for read
// operation.
func GenerateDescribeFirewallPolicyInput(cr *svcapitypes.FirewallPolicy) *svcsdk.DescribeFirewallPolicyInput {
	res := &svcsdk.DescribeFirewallPolicyInput{}

	if cr.Spec.ForProvider.FirewallPolicyName != nil {
		res.SetFirewallPolicyName(*cr.Spec.ForProvider.FirewallPolicyName)
	}

	return res
}

// GenerateFirewallPolicy returns the current state in the form of *svcapitypes.FirewallPolicy.
func GenerateFirewallPolicy(resp *svcsdk.DescribeFirewallPolicyOutput) *svcapitypes.FirewallPolicy {
	cr := &svcapitypes.FirewallPolicy{}

	if resp.FirewallPolicy != nil {
		f0 := &svcapitypes.FirewallPolicy_SDK{}
		if resp.FirewallPolicy.StatefulRuleGroupReferences != nil {
			f0f0 := []*svcapitypes.StatefulRuleGroupReference{}
			for _, f0f0iter := range resp.FirewallPolicy.StatefulRuleGroupReferences {
				f0f0elem := &svcapitypes.StatefulRuleGroupReference{}
				if f0f0iter.ResourceArn != nil {
					f0f0elem.ResourceARN = f0f0iter.ResourceArn
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.StatefulRuleGroupReferences = f0f0
		}
		if resp.FirewallPolicy.StatelessCustomActions != nil {
			f0f1 := []*svcapitypes.CustomAction{}
			for _, f0f1iter := range resp.FirewallPolicy.StatelessCustomActions {
				f0f1elem := &svcapitypes.CustomAction{}
				if f0f1iter.ActionDefinition != nil {
					f0f1elemf0 := &svcapitypes.ActionDefinition{}
					if f0f1iter.ActionDefinition.PublishMetricAction != nil {
						f0f1elemf0f0 := &svcapitypes.PublishMetricAction{}
						if f0f1iter.ActionDefinition.PublishMetricAction.Dimensions != nil {
							f0f1elemf0f0f0 := []*svcapitypes.Dimension{}
							for _, f0f1elemf0f0f0iter := range f0f1iter.ActionDefinition.PublishMetricAction.Dimensions {
								f0f1elemf0f0f0elem := &svcapitypes.Dimension{}
								if f0f1elemf0f0f0iter.Value != nil {
									f0f1elemf0f0f0elem.Value = f0f1elemf0f0f0iter.Value
								}
								f0f1elemf0f0f0 = append(f0f1elemf0f0f0, f0f1elemf0f0f0elem)
							}
							f0f1elemf0f0.Dimensions = f0f1elemf0f0f0
						}
						f0f1elemf0.PublishMetricAction = f0f1elemf0f0
					}
					f0f1elem.ActionDefinition = f0f1elemf0
				}
				if f0f1iter.ActionName != nil {
					f0f1elem.ActionName = f0f1iter.ActionName
				}
				f0f1 = append(f0f1, f0f1elem)
			}
			f0.StatelessCustomActions = f0f1
		}
		if resp.FirewallPolicy.StatelessDefaultActions != nil {
			f0f2 := []*string{}
			for _, f0f2iter := range resp.FirewallPolicy.StatelessDefaultActions {
				var f0f2elem string
				f0f2elem = *f0f2iter
				f0f2 = append(f0f2, &f0f2elem)
			}
			f0.StatelessDefaultActions = f0f2
		}
		if resp.FirewallPolicy.StatelessFragmentDefaultActions != nil {
			f0f3 := []*string{}
			for _, f0f3iter := range resp.FirewallPolicy.StatelessFragmentDefaultActions {
				var f0f3elem string
				f0f3elem = *f0f3iter
				f0f3 = append(f0f3, &f0f3elem)
			}
			f0.StatelessFragmentDefaultActions = f0f3
		}
		if resp.FirewallPolicy.StatelessRuleGroupReferences != nil {
			f0f4 := []*svcapitypes.StatelessRuleGroupReference{}
			for _, f0f4iter := range resp.FirewallPolicy.StatelessRuleGroupReferences {
				f0f4elem := &svcapitypes.StatelessRuleGroupReference{}
				if f0f4iter.Priority != nil {
					f0f4elem.Priority = f0f4iter.Priority
				}
				if f0f4iter.ResourceArn != nil {
					f0f4elem.ResourceARN = f0f4iter.ResourceArn
				}
				f0f4 = append(f0f4, f0f4elem)
			}
			f0.StatelessRuleGroupReferences = f0f4
		}
		cr.Spec.ForProvider.FirewallPolicy = f0
	} else {
		cr.Spec.ForProvider.FirewallPolicy = nil
	}
	if resp.FirewallPolicyResponse != nil {
		f1 := &svcapitypes.FirewallPolicyResponse{}
		if resp.FirewallPolicyResponse.Description != nil {
			f1.Description = resp.FirewallPolicyResponse.Description
		}
		if resp.FirewallPolicyResponse.FirewallPolicyArn != nil {
			f1.FirewallPolicyARN = resp.FirewallPolicyResponse.FirewallPolicyArn
		}
		if resp.FirewallPolicyResponse.FirewallPolicyId != nil {
			f1.FirewallPolicyID = resp.FirewallPolicyResponse.FirewallPolicyId
		}
		if resp.FirewallPolicyResponse.FirewallPolicyName != nil {
			f1.FirewallPolicyName = resp.FirewallPolicyResponse.FirewallPolicyName
		}
		if resp.FirewallPolicyResponse.FirewallPolicyStatus != nil {
			f1.FirewallPolicyStatus = resp.FirewallPolicyResponse.FirewallPolicyStatus
		}
		if resp.FirewallPolicyResponse.Tags != nil {
			f1f5 := []*svcapitypes.Tag{}
			for _, f1f5iter := range resp.FirewallPolicyResponse.Tags {
				f1f5elem := &svcapitypes.Tag{}
				if f1f5iter.Key != nil {
					f1f5elem.Key = f1f5iter.Key
				}
				if f1f5iter.Value != nil {
					f1f5elem.Value = f1f5iter.Value
				}
				f1f5 = append(f1f5, f1f5elem)
			}
			f1.Tags = f1f5
		}
		cr.Status.AtProvider.FirewallPolicyResponse = f1
	} else {
		cr.Status.AtProvider.FirewallPolicyResponse = nil
	}
	if resp.UpdateToken != nil {
		cr.Status.AtProvider.UpdateToken = resp.UpdateToken
	} else {
		cr.Status.AtProvider.UpdateToken = nil
	}

	return cr
}

// GenerateCreateFirewallPolicyInput returns a create input.
func GenerateCreateFirewallPolicyInput(cr *svcapitypes.FirewallPolicy) *svcsdk.CreateFirewallPolicyInput {
	res := &svcsdk.CreateFirewallPolicyInput{}

	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.DryRun != nil {
		res.SetDryRun(*cr.Spec.ForProvider.DryRun)
	}
	if cr.Spec.ForProvider.FirewallPolicy != nil {
		f2 := &svcsdk.FirewallPolicy{}
		if cr.Spec.ForProvider.FirewallPolicy.StatefulRuleGroupReferences != nil {
			f2f0 := []*svcsdk.StatefulRuleGroupReference{}
			for _, f2f0iter := range cr.Spec.ForProvider.FirewallPolicy.StatefulRuleGroupReferences {
				f2f0elem := &svcsdk.StatefulRuleGroupReference{}
				if f2f0iter.ResourceARN != nil {
					f2f0elem.SetResourceArn(*f2f0iter.ResourceARN)
				}
				f2f0 = append(f2f0, f2f0elem)
			}
			f2.SetStatefulRuleGroupReferences(f2f0)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessCustomActions != nil {
			f2f1 := []*svcsdk.CustomAction{}
			for _, f2f1iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessCustomActions {
				f2f1elem := &svcsdk.CustomAction{}
				if f2f1iter.ActionDefinition != nil {
					f2f1elemf0 := &svcsdk.ActionDefinition{}
					if f2f1iter.ActionDefinition.PublishMetricAction != nil {
						f2f1elemf0f0 := &svcsdk.PublishMetricAction{}
						if f2f1iter.ActionDefinition.PublishMetricAction.Dimensions != nil {
							f2f1elemf0f0f0 := []*svcsdk.Dimension{}
							for _, f2f1elemf0f0f0iter := range f2f1iter.ActionDefinition.PublishMetricAction.Dimensions {
								f2f1elemf0f0f0elem := &svcsdk.Dimension{}
								if f2f1elemf0f0f0iter.Value != nil {
									f2f1elemf0f0f0elem.SetValue(*f2f1elemf0f0f0iter.Value)
								}
								f2f1elemf0f0f0 = append(f2f1elemf0f0f0, f2f1elemf0f0f0elem)
							}
							f2f1elemf0f0.SetDimensions(f2f1elemf0f0f0)
						}
						f2f1elemf0.SetPublishMetricAction(f2f1elemf0f0)
					}
					f2f1elem.SetActionDefinition(f2f1elemf0)
				}
				if f2f1iter.ActionName != nil {
					f2f1elem.SetActionName(*f2f1iter.ActionName)
				}
				f2f1 = append(f2f1, f2f1elem)
			}
			f2.SetStatelessCustomActions(f2f1)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessDefaultActions != nil {
			f2f2 := []*string{}
			for _, f2f2iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessDefaultActions {
				var f2f2elem string
				f2f2elem = *f2f2iter
				f2f2 = append(f2f2, &f2f2elem)
			}
			f2.SetStatelessDefaultActions(f2f2)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessFragmentDefaultActions != nil {
			f2f3 := []*string{}
			for _, f2f3iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessFragmentDefaultActions {
				var f2f3elem string
				f2f3elem = *f2f3iter
				f2f3 = append(f2f3, &f2f3elem)
			}
			f2.SetStatelessFragmentDefaultActions(f2f3)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessRuleGroupReferences != nil {
			f2f4 := []*svcsdk.StatelessRuleGroupReference{}
			for _, f2f4iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessRuleGroupReferences {
				f2f4elem := &svcsdk.StatelessRuleGroupReference{}
				if f2f4iter.Priority != nil {
					f2f4elem.SetPriority(*f2f4iter.Priority)
				}
				if f2f4iter.ResourceARN != nil {
					f2f4elem.SetResourceArn(*f2f4iter.ResourceARN)
				}
				f2f4 = append(f2f4, f2f4elem)
			}
			f2.SetStatelessRuleGroupReferences(f2f4)
		}
		res.SetFirewallPolicy(f2)
	}
	if cr.Spec.ForProvider.FirewallPolicyName != nil {
		res.SetFirewallPolicyName(*cr.Spec.ForProvider.FirewallPolicyName)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range cr.Spec.ForProvider.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return res
}

// GenerateUpdateFirewallPolicyInput returns an update input.
func GenerateUpdateFirewallPolicyInput(cr *svcapitypes.FirewallPolicy) *svcsdk.UpdateFirewallPolicyInput {
	res := &svcsdk.UpdateFirewallPolicyInput{}

	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.DryRun != nil {
		res.SetDryRun(*cr.Spec.ForProvider.DryRun)
	}
	if cr.Spec.ForProvider.FirewallPolicy != nil {
		f2 := &svcsdk.FirewallPolicy{}
		if cr.Spec.ForProvider.FirewallPolicy.StatefulRuleGroupReferences != nil {
			f2f0 := []*svcsdk.StatefulRuleGroupReference{}
			for _, f2f0iter := range cr.Spec.ForProvider.FirewallPolicy.StatefulRuleGroupReferences {
				f2f0elem := &svcsdk.StatefulRuleGroupReference{}
				if f2f0iter.ResourceARN != nil {
					f2f0elem.SetResourceArn(*f2f0iter.ResourceARN)
				}
				f2f0 = append(f2f0, f2f0elem)
			}
			f2.SetStatefulRuleGroupReferences(f2f0)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessCustomActions != nil {
			f2f1 := []*svcsdk.CustomAction{}
			for _, f2f1iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessCustomActions {
				f2f1elem := &svcsdk.CustomAction{}
				if f2f1iter.ActionDefinition != nil {
					f2f1elemf0 := &svcsdk.ActionDefinition{}
					if f2f1iter.ActionDefinition.PublishMetricAction != nil {
						f2f1elemf0f0 := &svcsdk.PublishMetricAction{}
						if f2f1iter.ActionDefinition.PublishMetricAction.Dimensions != nil {
							f2f1elemf0f0f0 := []*svcsdk.Dimension{}
							for _, f2f1elemf0f0f0iter := range f2f1iter.ActionDefinition.PublishMetricAction.Dimensions {
								f2f1elemf0f0f0elem := &svcsdk.Dimension{}
								if f2f1elemf0f0f0iter.Value != nil {
									f2f1elemf0f0f0elem.SetValue(*f2f1elemf0f0f0iter.Value)
								}
								f2f1elemf0f0f0 = append(f2f1elemf0f0f0, f2f1elemf0f0f0elem)
							}
							f2f1elemf0f0.SetDimensions(f2f1elemf0f0f0)
						}
						f2f1elemf0.SetPublishMetricAction(f2f1elemf0f0)
					}
					f2f1elem.SetActionDefinition(f2f1elemf0)
				}
				if f2f1iter.ActionName != nil {
					f2f1elem.SetActionName(*f2f1iter.ActionName)
				}
				f2f1 = append(f2f1, f2f1elem)
			}
			f2.SetStatelessCustomActions(f2f1)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessDefaultActions != nil {
			f2f2 := []*string{}
			for _, f2f2iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessDefaultActions {
				var f2f2elem string
				f2f2elem = *f2f2iter
				f2f2 = append(f2f2, &f2f2elem)
			}
			f2.SetStatelessDefaultActions(f2f2)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessFragmentDefaultActions != nil {
			f2f3 := []*string{}
			for _, f2f3iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessFragmentDefaultActions {
				var f2f3elem string
				f2f3elem = *f2f3iter
				f2f3 = append(f2f3, &f2f3elem)
			}
			f2.SetStatelessFragmentDefaultActions(f2f3)
		}
		if cr.Spec.ForProvider.FirewallPolicy.StatelessRuleGroupReferences != nil {
			f2f4 := []*svcsdk.StatelessRuleGroupReference{}
			for _, f2f4iter := range cr.Spec.ForProvider.FirewallPolicy.StatelessRuleGroupReferences {
				f2f4elem := &svcsdk.StatelessRuleGroupReference{}
				if f2f4iter.Priority != nil {
					f2f4elem.SetPriority(*f2f4iter.Priority)
				}
				if f2f4iter.ResourceARN != nil {
					f2f4elem.SetResourceArn(*f2f4iter.ResourceARN)
				}
				f2f4 = append(f2f4, f2f4elem)
			}
			f2.SetStatelessRuleGroupReferences(f2f4)
		}
		res.SetFirewallPolicy(f2)
	}
	if cr.Spec.ForProvider.FirewallPolicyName != nil {
		res.SetFirewallPolicyName(*cr.Spec.ForProvider.FirewallPolicyName)
	}
	if cr.Status.AtProvider.UpdateToken != nil {
		res.SetUpdateToken(*cr.Status.AtProvider.UpdateToken)
	}

	return res
}

// GenerateDeleteFirewallPolicyInput returns a deletion input.
func GenerateDeleteFirewallPolicyInput(cr *svcapitypes.FirewallPolicy) *svcsdk.DeleteFirewallPolicyInput {
	res := &svcsdk.DeleteFirewallPolicyInput{}

	if cr.Spec.ForProvider.FirewallPolicyName != nil {
		res.SetFirewallPolicyName(*cr.Spec.ForProvider.FirewallPolicyName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
