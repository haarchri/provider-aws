/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package rulegroup

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/networkfirewall"

	svcapitypes "github.com/crossplane/provider-aws/apis/networkfirewall/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeRuleGroupInput returns input for read
// operation.
func GenerateDescribeRuleGroupInput(cr *svcapitypes.RuleGroup) *svcsdk.DescribeRuleGroupInput {
	res := &svcsdk.DescribeRuleGroupInput{}

	if cr.Spec.ForProvider.RuleGroupName != nil {
		res.SetRuleGroupName(*cr.Spec.ForProvider.RuleGroupName)
	}
	if cr.Spec.ForProvider.Type != nil {
		res.SetType(*cr.Spec.ForProvider.Type)
	}

	return res
}

// GenerateRuleGroup returns the current state in the form of *svcapitypes.RuleGroup.
func GenerateRuleGroup(resp *svcsdk.DescribeRuleGroupOutput) *svcapitypes.RuleGroup {
	cr := &svcapitypes.RuleGroup{}

	if resp.RuleGroup != nil {
		f0 := &svcapitypes.RuleGroup_SDK{}
		if resp.RuleGroup.RuleVariables != nil {
			f0f0 := &svcapitypes.RuleVariables{}
			if resp.RuleGroup.RuleVariables.IPSets != nil {
				f0f0f0 := map[string]*svcapitypes.IPSet{}
				for f0f0f0key, f0f0f0valiter := range resp.RuleGroup.RuleVariables.IPSets {
					f0f0f0val := &svcapitypes.IPSet{}
					if f0f0f0valiter.Definition != nil {
						f0f0f0valf0 := []*string{}
						for _, f0f0f0valf0iter := range f0f0f0valiter.Definition {
							var f0f0f0valf0elem string
							f0f0f0valf0elem = *f0f0f0valf0iter
							f0f0f0valf0 = append(f0f0f0valf0, &f0f0f0valf0elem)
						}
						f0f0f0val.Definition = f0f0f0valf0
					}
					f0f0f0[f0f0f0key] = f0f0f0val
				}
				f0f0.IPSets = f0f0f0
			}
			if resp.RuleGroup.RuleVariables.PortSets != nil {
				f0f0f1 := map[string]*svcapitypes.PortSet{}
				for f0f0f1key, f0f0f1valiter := range resp.RuleGroup.RuleVariables.PortSets {
					f0f0f1val := &svcapitypes.PortSet{}
					if f0f0f1valiter.Definition != nil {
						f0f0f1valf0 := []*string{}
						for _, f0f0f1valf0iter := range f0f0f1valiter.Definition {
							var f0f0f1valf0elem string
							f0f0f1valf0elem = *f0f0f1valf0iter
							f0f0f1valf0 = append(f0f0f1valf0, &f0f0f1valf0elem)
						}
						f0f0f1val.Definition = f0f0f1valf0
					}
					f0f0f1[f0f0f1key] = f0f0f1val
				}
				f0f0.PortSets = f0f0f1
			}
			f0.RuleVariables = f0f0
		}
		if resp.RuleGroup.RulesSource != nil {
			f0f1 := &svcapitypes.RulesSource{}
			if resp.RuleGroup.RulesSource.RulesSourceList != nil {
				f0f1f0 := &svcapitypes.RulesSourceList{}
				if resp.RuleGroup.RulesSource.RulesSourceList.GeneratedRulesType != nil {
					f0f1f0.GeneratedRulesType = resp.RuleGroup.RulesSource.RulesSourceList.GeneratedRulesType
				}
				if resp.RuleGroup.RulesSource.RulesSourceList.TargetTypes != nil {
					f0f1f0f1 := []*string{}
					for _, f0f1f0f1iter := range resp.RuleGroup.RulesSource.RulesSourceList.TargetTypes {
						var f0f1f0f1elem string
						f0f1f0f1elem = *f0f1f0f1iter
						f0f1f0f1 = append(f0f1f0f1, &f0f1f0f1elem)
					}
					f0f1f0.TargetTypes = f0f1f0f1
				}
				if resp.RuleGroup.RulesSource.RulesSourceList.Targets != nil {
					f0f1f0f2 := []*string{}
					for _, f0f1f0f2iter := range resp.RuleGroup.RulesSource.RulesSourceList.Targets {
						var f0f1f0f2elem string
						f0f1f0f2elem = *f0f1f0f2iter
						f0f1f0f2 = append(f0f1f0f2, &f0f1f0f2elem)
					}
					f0f1f0.Targets = f0f1f0f2
				}
				f0f1.RulesSourceList = f0f1f0
			}
			if resp.RuleGroup.RulesSource.RulesString != nil {
				f0f1.RulesString = resp.RuleGroup.RulesSource.RulesString
			}
			if resp.RuleGroup.RulesSource.StatefulRules != nil {
				f0f1f2 := []*svcapitypes.StatefulRule{}
				for _, f0f1f2iter := range resp.RuleGroup.RulesSource.StatefulRules {
					f0f1f2elem := &svcapitypes.StatefulRule{}
					if f0f1f2iter.Action != nil {
						f0f1f2elem.Action = f0f1f2iter.Action
					}
					if f0f1f2iter.Header != nil {
						f0f1f2elemf1 := &svcapitypes.Header{}
						if f0f1f2iter.Header.Destination != nil {
							f0f1f2elemf1.Destination = f0f1f2iter.Header.Destination
						}
						if f0f1f2iter.Header.DestinationPort != nil {
							f0f1f2elemf1.DestinationPort = f0f1f2iter.Header.DestinationPort
						}
						if f0f1f2iter.Header.Direction != nil {
							f0f1f2elemf1.Direction = f0f1f2iter.Header.Direction
						}
						if f0f1f2iter.Header.Protocol != nil {
							f0f1f2elemf1.Protocol = f0f1f2iter.Header.Protocol
						}
						if f0f1f2iter.Header.Source != nil {
							f0f1f2elemf1.Source = f0f1f2iter.Header.Source
						}
						if f0f1f2iter.Header.SourcePort != nil {
							f0f1f2elemf1.SourcePort = f0f1f2iter.Header.SourcePort
						}
						f0f1f2elem.Header = f0f1f2elemf1
					}
					if f0f1f2iter.RuleOptions != nil {
						f0f1f2elemf2 := []*svcapitypes.RuleOption{}
						for _, f0f1f2elemf2iter := range f0f1f2iter.RuleOptions {
							f0f1f2elemf2elem := &svcapitypes.RuleOption{}
							if f0f1f2elemf2iter.Keyword != nil {
								f0f1f2elemf2elem.Keyword = f0f1f2elemf2iter.Keyword
							}
							if f0f1f2elemf2iter.Settings != nil {
								f0f1f2elemf2elemf1 := []*string{}
								for _, f0f1f2elemf2elemf1iter := range f0f1f2elemf2iter.Settings {
									var f0f1f2elemf2elemf1elem string
									f0f1f2elemf2elemf1elem = *f0f1f2elemf2elemf1iter
									f0f1f2elemf2elemf1 = append(f0f1f2elemf2elemf1, &f0f1f2elemf2elemf1elem)
								}
								f0f1f2elemf2elem.Settings = f0f1f2elemf2elemf1
							}
							f0f1f2elemf2 = append(f0f1f2elemf2, f0f1f2elemf2elem)
						}
						f0f1f2elem.RuleOptions = f0f1f2elemf2
					}
					f0f1f2 = append(f0f1f2, f0f1f2elem)
				}
				f0f1.StatefulRules = f0f1f2
			}
			if resp.RuleGroup.RulesSource.StatelessRulesAndCustomActions != nil {
				f0f1f3 := &svcapitypes.StatelessRulesAndCustomActions{}
				if resp.RuleGroup.RulesSource.StatelessRulesAndCustomActions.CustomActions != nil {
					f0f1f3f0 := []*svcapitypes.CustomAction{}
					for _, f0f1f3f0iter := range resp.RuleGroup.RulesSource.StatelessRulesAndCustomActions.CustomActions {
						f0f1f3f0elem := &svcapitypes.CustomAction{}
						if f0f1f3f0iter.ActionDefinition != nil {
							f0f1f3f0elemf0 := &svcapitypes.ActionDefinition{}
							if f0f1f3f0iter.ActionDefinition.PublishMetricAction != nil {
								f0f1f3f0elemf0f0 := &svcapitypes.PublishMetricAction{}
								if f0f1f3f0iter.ActionDefinition.PublishMetricAction.Dimensions != nil {
									f0f1f3f0elemf0f0f0 := []*svcapitypes.Dimension{}
									for _, f0f1f3f0elemf0f0f0iter := range f0f1f3f0iter.ActionDefinition.PublishMetricAction.Dimensions {
										f0f1f3f0elemf0f0f0elem := &svcapitypes.Dimension{}
										if f0f1f3f0elemf0f0f0iter.Value != nil {
											f0f1f3f0elemf0f0f0elem.Value = f0f1f3f0elemf0f0f0iter.Value
										}
										f0f1f3f0elemf0f0f0 = append(f0f1f3f0elemf0f0f0, f0f1f3f0elemf0f0f0elem)
									}
									f0f1f3f0elemf0f0.Dimensions = f0f1f3f0elemf0f0f0
								}
								f0f1f3f0elemf0.PublishMetricAction = f0f1f3f0elemf0f0
							}
							f0f1f3f0elem.ActionDefinition = f0f1f3f0elemf0
						}
						if f0f1f3f0iter.ActionName != nil {
							f0f1f3f0elem.ActionName = f0f1f3f0iter.ActionName
						}
						f0f1f3f0 = append(f0f1f3f0, f0f1f3f0elem)
					}
					f0f1f3.CustomActions = f0f1f3f0
				}
				if resp.RuleGroup.RulesSource.StatelessRulesAndCustomActions.StatelessRules != nil {
					f0f1f3f1 := []*svcapitypes.StatelessRule{}
					for _, f0f1f3f1iter := range resp.RuleGroup.RulesSource.StatelessRulesAndCustomActions.StatelessRules {
						f0f1f3f1elem := &svcapitypes.StatelessRule{}
						if f0f1f3f1iter.Priority != nil {
							f0f1f3f1elem.Priority = f0f1f3f1iter.Priority
						}
						if f0f1f3f1iter.RuleDefinition != nil {
							f0f1f3f1elemf1 := &svcapitypes.RuleDefinition{}
							if f0f1f3f1iter.RuleDefinition.Actions != nil {
								f0f1f3f1elemf1f0 := []*string{}
								for _, f0f1f3f1elemf1f0iter := range f0f1f3f1iter.RuleDefinition.Actions {
									var f0f1f3f1elemf1f0elem string
									f0f1f3f1elemf1f0elem = *f0f1f3f1elemf1f0iter
									f0f1f3f1elemf1f0 = append(f0f1f3f1elemf1f0, &f0f1f3f1elemf1f0elem)
								}
								f0f1f3f1elemf1.Actions = f0f1f3f1elemf1f0
							}
							if f0f1f3f1iter.RuleDefinition.MatchAttributes != nil {
								f0f1f3f1elemf1f1 := &svcapitypes.MatchAttributes{}
								if f0f1f3f1iter.RuleDefinition.MatchAttributes.DestinationPorts != nil {
									f0f1f3f1elemf1f1f0 := []*svcapitypes.PortRange{}
									for _, f0f1f3f1elemf1f1f0iter := range f0f1f3f1iter.RuleDefinition.MatchAttributes.DestinationPorts {
										f0f1f3f1elemf1f1f0elem := &svcapitypes.PortRange{}
										if f0f1f3f1elemf1f1f0iter.FromPort != nil {
											f0f1f3f1elemf1f1f0elem.FromPort = f0f1f3f1elemf1f1f0iter.FromPort
										}
										if f0f1f3f1elemf1f1f0iter.ToPort != nil {
											f0f1f3f1elemf1f1f0elem.ToPort = f0f1f3f1elemf1f1f0iter.ToPort
										}
										f0f1f3f1elemf1f1f0 = append(f0f1f3f1elemf1f1f0, f0f1f3f1elemf1f1f0elem)
									}
									f0f1f3f1elemf1f1.DestinationPorts = f0f1f3f1elemf1f1f0
								}
								if f0f1f3f1iter.RuleDefinition.MatchAttributes.Destinations != nil {
									f0f1f3f1elemf1f1f1 := []*svcapitypes.Address{}
									for _, f0f1f3f1elemf1f1f1iter := range f0f1f3f1iter.RuleDefinition.MatchAttributes.Destinations {
										f0f1f3f1elemf1f1f1elem := &svcapitypes.Address{}
										if f0f1f3f1elemf1f1f1iter.AddressDefinition != nil {
											f0f1f3f1elemf1f1f1elem.AddressDefinition = f0f1f3f1elemf1f1f1iter.AddressDefinition
										}
										f0f1f3f1elemf1f1f1 = append(f0f1f3f1elemf1f1f1, f0f1f3f1elemf1f1f1elem)
									}
									f0f1f3f1elemf1f1.Destinations = f0f1f3f1elemf1f1f1
								}
								if f0f1f3f1iter.RuleDefinition.MatchAttributes.Protocols != nil {
									f0f1f3f1elemf1f1f2 := []*int64{}
									for _, f0f1f3f1elemf1f1f2iter := range f0f1f3f1iter.RuleDefinition.MatchAttributes.Protocols {
										var f0f1f3f1elemf1f1f2elem int64
										f0f1f3f1elemf1f1f2elem = *f0f1f3f1elemf1f1f2iter
										f0f1f3f1elemf1f1f2 = append(f0f1f3f1elemf1f1f2, &f0f1f3f1elemf1f1f2elem)
									}
									f0f1f3f1elemf1f1.Protocols = f0f1f3f1elemf1f1f2
								}
								if f0f1f3f1iter.RuleDefinition.MatchAttributes.SourcePorts != nil {
									f0f1f3f1elemf1f1f3 := []*svcapitypes.PortRange{}
									for _, f0f1f3f1elemf1f1f3iter := range f0f1f3f1iter.RuleDefinition.MatchAttributes.SourcePorts {
										f0f1f3f1elemf1f1f3elem := &svcapitypes.PortRange{}
										if f0f1f3f1elemf1f1f3iter.FromPort != nil {
											f0f1f3f1elemf1f1f3elem.FromPort = f0f1f3f1elemf1f1f3iter.FromPort
										}
										if f0f1f3f1elemf1f1f3iter.ToPort != nil {
											f0f1f3f1elemf1f1f3elem.ToPort = f0f1f3f1elemf1f1f3iter.ToPort
										}
										f0f1f3f1elemf1f1f3 = append(f0f1f3f1elemf1f1f3, f0f1f3f1elemf1f1f3elem)
									}
									f0f1f3f1elemf1f1.SourcePorts = f0f1f3f1elemf1f1f3
								}
								if f0f1f3f1iter.RuleDefinition.MatchAttributes.Sources != nil {
									f0f1f3f1elemf1f1f4 := []*svcapitypes.Address{}
									for _, f0f1f3f1elemf1f1f4iter := range f0f1f3f1iter.RuleDefinition.MatchAttributes.Sources {
										f0f1f3f1elemf1f1f4elem := &svcapitypes.Address{}
										if f0f1f3f1elemf1f1f4iter.AddressDefinition != nil {
											f0f1f3f1elemf1f1f4elem.AddressDefinition = f0f1f3f1elemf1f1f4iter.AddressDefinition
										}
										f0f1f3f1elemf1f1f4 = append(f0f1f3f1elemf1f1f4, f0f1f3f1elemf1f1f4elem)
									}
									f0f1f3f1elemf1f1.Sources = f0f1f3f1elemf1f1f4
								}
								if f0f1f3f1iter.RuleDefinition.MatchAttributes.TCPFlags != nil {
									f0f1f3f1elemf1f1f5 := []*svcapitypes.TCPFlagField{}
									for _, f0f1f3f1elemf1f1f5iter := range f0f1f3f1iter.RuleDefinition.MatchAttributes.TCPFlags {
										f0f1f3f1elemf1f1f5elem := &svcapitypes.TCPFlagField{}
										if f0f1f3f1elemf1f1f5iter.Flags != nil {
											f0f1f3f1elemf1f1f5elemf0 := []*string{}
											for _, f0f1f3f1elemf1f1f5elemf0iter := range f0f1f3f1elemf1f1f5iter.Flags {
												var f0f1f3f1elemf1f1f5elemf0elem string
												f0f1f3f1elemf1f1f5elemf0elem = *f0f1f3f1elemf1f1f5elemf0iter
												f0f1f3f1elemf1f1f5elemf0 = append(f0f1f3f1elemf1f1f5elemf0, &f0f1f3f1elemf1f1f5elemf0elem)
											}
											f0f1f3f1elemf1f1f5elem.Flags = f0f1f3f1elemf1f1f5elemf0
										}
										if f0f1f3f1elemf1f1f5iter.Masks != nil {
											f0f1f3f1elemf1f1f5elemf1 := []*string{}
											for _, f0f1f3f1elemf1f1f5elemf1iter := range f0f1f3f1elemf1f1f5iter.Masks {
												var f0f1f3f1elemf1f1f5elemf1elem string
												f0f1f3f1elemf1f1f5elemf1elem = *f0f1f3f1elemf1f1f5elemf1iter
												f0f1f3f1elemf1f1f5elemf1 = append(f0f1f3f1elemf1f1f5elemf1, &f0f1f3f1elemf1f1f5elemf1elem)
											}
											f0f1f3f1elemf1f1f5elem.Masks = f0f1f3f1elemf1f1f5elemf1
										}
										f0f1f3f1elemf1f1f5 = append(f0f1f3f1elemf1f1f5, f0f1f3f1elemf1f1f5elem)
									}
									f0f1f3f1elemf1f1.TCPFlags = f0f1f3f1elemf1f1f5
								}
								f0f1f3f1elemf1.MatchAttributes = f0f1f3f1elemf1f1
							}
							f0f1f3f1elem.RuleDefinition = f0f1f3f1elemf1
						}
						f0f1f3f1 = append(f0f1f3f1, f0f1f3f1elem)
					}
					f0f1f3.StatelessRules = f0f1f3f1
				}
				f0f1.StatelessRulesAndCustomActions = f0f1f3
			}
			f0.RulesSource = f0f1
		}
		cr.Spec.ForProvider.RuleGroup = f0
	} else {
		cr.Spec.ForProvider.RuleGroup = nil
	}
	if resp.RuleGroupResponse != nil {
		f1 := &svcapitypes.RuleGroupResponse{}
		if resp.RuleGroupResponse.Capacity != nil {
			f1.Capacity = resp.RuleGroupResponse.Capacity
		}
		if resp.RuleGroupResponse.Description != nil {
			f1.Description = resp.RuleGroupResponse.Description
		}
		if resp.RuleGroupResponse.RuleGroupArn != nil {
			f1.RuleGroupARN = resp.RuleGroupResponse.RuleGroupArn
		}
		if resp.RuleGroupResponse.RuleGroupId != nil {
			f1.RuleGroupID = resp.RuleGroupResponse.RuleGroupId
		}
		if resp.RuleGroupResponse.RuleGroupName != nil {
			f1.RuleGroupName = resp.RuleGroupResponse.RuleGroupName
		}
		if resp.RuleGroupResponse.RuleGroupStatus != nil {
			f1.RuleGroupStatus = resp.RuleGroupResponse.RuleGroupStatus
		}
		if resp.RuleGroupResponse.Tags != nil {
			f1f6 := []*svcapitypes.Tag{}
			for _, f1f6iter := range resp.RuleGroupResponse.Tags {
				f1f6elem := &svcapitypes.Tag{}
				if f1f6iter.Key != nil {
					f1f6elem.Key = f1f6iter.Key
				}
				if f1f6iter.Value != nil {
					f1f6elem.Value = f1f6iter.Value
				}
				f1f6 = append(f1f6, f1f6elem)
			}
			f1.Tags = f1f6
		}
		if resp.RuleGroupResponse.Type != nil {
			f1.Type = resp.RuleGroupResponse.Type
		}
		cr.Status.AtProvider.RuleGroupResponse = f1
	} else {
		cr.Status.AtProvider.RuleGroupResponse = nil
	}
	if resp.UpdateToken != nil {
		cr.Status.AtProvider.UpdateToken = resp.UpdateToken
	} else {
		cr.Status.AtProvider.UpdateToken = nil
	}

	return cr
}

// GenerateCreateRuleGroupInput returns a create input.
func GenerateCreateRuleGroupInput(cr *svcapitypes.RuleGroup) *svcsdk.CreateRuleGroupInput {
	res := &svcsdk.CreateRuleGroupInput{}

	if cr.Spec.ForProvider.Capacity != nil {
		res.SetCapacity(*cr.Spec.ForProvider.Capacity)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.DryRun != nil {
		res.SetDryRun(*cr.Spec.ForProvider.DryRun)
	}
	if cr.Spec.ForProvider.RuleGroup != nil {
		f3 := &svcsdk.RuleGroup{}
		if cr.Spec.ForProvider.RuleGroup.RuleVariables != nil {
			f3f0 := &svcsdk.RuleVariables{}
			if cr.Spec.ForProvider.RuleGroup.RuleVariables.IPSets != nil {
				f3f0f0 := map[string]*svcsdk.IPSet{}
				for f3f0f0key, f3f0f0valiter := range cr.Spec.ForProvider.RuleGroup.RuleVariables.IPSets {
					f3f0f0val := &svcsdk.IPSet{}
					if f3f0f0valiter.Definition != nil {
						f3f0f0valf0 := []*string{}
						for _, f3f0f0valf0iter := range f3f0f0valiter.Definition {
							var f3f0f0valf0elem string
							f3f0f0valf0elem = *f3f0f0valf0iter
							f3f0f0valf0 = append(f3f0f0valf0, &f3f0f0valf0elem)
						}
						f3f0f0val.SetDefinition(f3f0f0valf0)
					}
					f3f0f0[f3f0f0key] = f3f0f0val
				}
				f3f0.SetIPSets(f3f0f0)
			}
			if cr.Spec.ForProvider.RuleGroup.RuleVariables.PortSets != nil {
				f3f0f1 := map[string]*svcsdk.PortSet{}
				for f3f0f1key, f3f0f1valiter := range cr.Spec.ForProvider.RuleGroup.RuleVariables.PortSets {
					f3f0f1val := &svcsdk.PortSet{}
					if f3f0f1valiter.Definition != nil {
						f3f0f1valf0 := []*string{}
						for _, f3f0f1valf0iter := range f3f0f1valiter.Definition {
							var f3f0f1valf0elem string
							f3f0f1valf0elem = *f3f0f1valf0iter
							f3f0f1valf0 = append(f3f0f1valf0, &f3f0f1valf0elem)
						}
						f3f0f1val.SetDefinition(f3f0f1valf0)
					}
					f3f0f1[f3f0f1key] = f3f0f1val
				}
				f3f0.SetPortSets(f3f0f1)
			}
			f3.SetRuleVariables(f3f0)
		}
		if cr.Spec.ForProvider.RuleGroup.RulesSource != nil {
			f3f1 := &svcsdk.RulesSource{}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList != nil {
				f3f1f0 := &svcsdk.RulesSourceList{}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.GeneratedRulesType != nil {
					f3f1f0.SetGeneratedRulesType(*cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.GeneratedRulesType)
				}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.TargetTypes != nil {
					f3f1f0f1 := []*string{}
					for _, f3f1f0f1iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.TargetTypes {
						var f3f1f0f1elem string
						f3f1f0f1elem = *f3f1f0f1iter
						f3f1f0f1 = append(f3f1f0f1, &f3f1f0f1elem)
					}
					f3f1f0.SetTargetTypes(f3f1f0f1)
				}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.Targets != nil {
					f3f1f0f2 := []*string{}
					for _, f3f1f0f2iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.Targets {
						var f3f1f0f2elem string
						f3f1f0f2elem = *f3f1f0f2iter
						f3f1f0f2 = append(f3f1f0f2, &f3f1f0f2elem)
					}
					f3f1f0.SetTargets(f3f1f0f2)
				}
				f3f1.SetRulesSourceList(f3f1f0)
			}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesString != nil {
				f3f1.SetRulesString(*cr.Spec.ForProvider.RuleGroup.RulesSource.RulesString)
			}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.StatefulRules != nil {
				f3f1f2 := []*svcsdk.StatefulRule{}
				for _, f3f1f2iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.StatefulRules {
					f3f1f2elem := &svcsdk.StatefulRule{}
					if f3f1f2iter.Action != nil {
						f3f1f2elem.SetAction(*f3f1f2iter.Action)
					}
					if f3f1f2iter.Header != nil {
						f3f1f2elemf1 := &svcsdk.Header{}
						if f3f1f2iter.Header.Destination != nil {
							f3f1f2elemf1.SetDestination(*f3f1f2iter.Header.Destination)
						}
						if f3f1f2iter.Header.DestinationPort != nil {
							f3f1f2elemf1.SetDestinationPort(*f3f1f2iter.Header.DestinationPort)
						}
						if f3f1f2iter.Header.Direction != nil {
							f3f1f2elemf1.SetDirection(*f3f1f2iter.Header.Direction)
						}
						if f3f1f2iter.Header.Protocol != nil {
							f3f1f2elemf1.SetProtocol(*f3f1f2iter.Header.Protocol)
						}
						if f3f1f2iter.Header.Source != nil {
							f3f1f2elemf1.SetSource(*f3f1f2iter.Header.Source)
						}
						if f3f1f2iter.Header.SourcePort != nil {
							f3f1f2elemf1.SetSourcePort(*f3f1f2iter.Header.SourcePort)
						}
						f3f1f2elem.SetHeader(f3f1f2elemf1)
					}
					if f3f1f2iter.RuleOptions != nil {
						f3f1f2elemf2 := []*svcsdk.RuleOption{}
						for _, f3f1f2elemf2iter := range f3f1f2iter.RuleOptions {
							f3f1f2elemf2elem := &svcsdk.RuleOption{}
							if f3f1f2elemf2iter.Keyword != nil {
								f3f1f2elemf2elem.SetKeyword(*f3f1f2elemf2iter.Keyword)
							}
							if f3f1f2elemf2iter.Settings != nil {
								f3f1f2elemf2elemf1 := []*string{}
								for _, f3f1f2elemf2elemf1iter := range f3f1f2elemf2iter.Settings {
									var f3f1f2elemf2elemf1elem string
									f3f1f2elemf2elemf1elem = *f3f1f2elemf2elemf1iter
									f3f1f2elemf2elemf1 = append(f3f1f2elemf2elemf1, &f3f1f2elemf2elemf1elem)
								}
								f3f1f2elemf2elem.SetSettings(f3f1f2elemf2elemf1)
							}
							f3f1f2elemf2 = append(f3f1f2elemf2, f3f1f2elemf2elem)
						}
						f3f1f2elem.SetRuleOptions(f3f1f2elemf2)
					}
					f3f1f2 = append(f3f1f2, f3f1f2elem)
				}
				f3f1.SetStatefulRules(f3f1f2)
			}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions != nil {
				f3f1f3 := &svcsdk.StatelessRulesAndCustomActions{}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.CustomActions != nil {
					f3f1f3f0 := []*svcsdk.CustomAction{}
					for _, f3f1f3f0iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.CustomActions {
						f3f1f3f0elem := &svcsdk.CustomAction{}
						if f3f1f3f0iter.ActionDefinition != nil {
							f3f1f3f0elemf0 := &svcsdk.ActionDefinition{}
							if f3f1f3f0iter.ActionDefinition.PublishMetricAction != nil {
								f3f1f3f0elemf0f0 := &svcsdk.PublishMetricAction{}
								if f3f1f3f0iter.ActionDefinition.PublishMetricAction.Dimensions != nil {
									f3f1f3f0elemf0f0f0 := []*svcsdk.Dimension{}
									for _, f3f1f3f0elemf0f0f0iter := range f3f1f3f0iter.ActionDefinition.PublishMetricAction.Dimensions {
										f3f1f3f0elemf0f0f0elem := &svcsdk.Dimension{}
										if f3f1f3f0elemf0f0f0iter.Value != nil {
											f3f1f3f0elemf0f0f0elem.SetValue(*f3f1f3f0elemf0f0f0iter.Value)
										}
										f3f1f3f0elemf0f0f0 = append(f3f1f3f0elemf0f0f0, f3f1f3f0elemf0f0f0elem)
									}
									f3f1f3f0elemf0f0.SetDimensions(f3f1f3f0elemf0f0f0)
								}
								f3f1f3f0elemf0.SetPublishMetricAction(f3f1f3f0elemf0f0)
							}
							f3f1f3f0elem.SetActionDefinition(f3f1f3f0elemf0)
						}
						if f3f1f3f0iter.ActionName != nil {
							f3f1f3f0elem.SetActionName(*f3f1f3f0iter.ActionName)
						}
						f3f1f3f0 = append(f3f1f3f0, f3f1f3f0elem)
					}
					f3f1f3.SetCustomActions(f3f1f3f0)
				}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.StatelessRules != nil {
					f3f1f3f1 := []*svcsdk.StatelessRule{}
					for _, f3f1f3f1iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.StatelessRules {
						f3f1f3f1elem := &svcsdk.StatelessRule{}
						if f3f1f3f1iter.Priority != nil {
							f3f1f3f1elem.SetPriority(*f3f1f3f1iter.Priority)
						}
						if f3f1f3f1iter.RuleDefinition != nil {
							f3f1f3f1elemf1 := &svcsdk.RuleDefinition{}
							if f3f1f3f1iter.RuleDefinition.Actions != nil {
								f3f1f3f1elemf1f0 := []*string{}
								for _, f3f1f3f1elemf1f0iter := range f3f1f3f1iter.RuleDefinition.Actions {
									var f3f1f3f1elemf1f0elem string
									f3f1f3f1elemf1f0elem = *f3f1f3f1elemf1f0iter
									f3f1f3f1elemf1f0 = append(f3f1f3f1elemf1f0, &f3f1f3f1elemf1f0elem)
								}
								f3f1f3f1elemf1.SetActions(f3f1f3f1elemf1f0)
							}
							if f3f1f3f1iter.RuleDefinition.MatchAttributes != nil {
								f3f1f3f1elemf1f1 := &svcsdk.MatchAttributes{}
								if f3f1f3f1iter.RuleDefinition.MatchAttributes.DestinationPorts != nil {
									f3f1f3f1elemf1f1f0 := []*svcsdk.PortRange{}
									for _, f3f1f3f1elemf1f1f0iter := range f3f1f3f1iter.RuleDefinition.MatchAttributes.DestinationPorts {
										f3f1f3f1elemf1f1f0elem := &svcsdk.PortRange{}
										if f3f1f3f1elemf1f1f0iter.FromPort != nil {
											f3f1f3f1elemf1f1f0elem.SetFromPort(*f3f1f3f1elemf1f1f0iter.FromPort)
										}
										if f3f1f3f1elemf1f1f0iter.ToPort != nil {
											f3f1f3f1elemf1f1f0elem.SetToPort(*f3f1f3f1elemf1f1f0iter.ToPort)
										}
										f3f1f3f1elemf1f1f0 = append(f3f1f3f1elemf1f1f0, f3f1f3f1elemf1f1f0elem)
									}
									f3f1f3f1elemf1f1.SetDestinationPorts(f3f1f3f1elemf1f1f0)
								}
								if f3f1f3f1iter.RuleDefinition.MatchAttributes.Destinations != nil {
									f3f1f3f1elemf1f1f1 := []*svcsdk.Address{}
									for _, f3f1f3f1elemf1f1f1iter := range f3f1f3f1iter.RuleDefinition.MatchAttributes.Destinations {
										f3f1f3f1elemf1f1f1elem := &svcsdk.Address{}
										if f3f1f3f1elemf1f1f1iter.AddressDefinition != nil {
											f3f1f3f1elemf1f1f1elem.SetAddressDefinition(*f3f1f3f1elemf1f1f1iter.AddressDefinition)
										}
										f3f1f3f1elemf1f1f1 = append(f3f1f3f1elemf1f1f1, f3f1f3f1elemf1f1f1elem)
									}
									f3f1f3f1elemf1f1.SetDestinations(f3f1f3f1elemf1f1f1)
								}
								if f3f1f3f1iter.RuleDefinition.MatchAttributes.Protocols != nil {
									f3f1f3f1elemf1f1f2 := []*int64{}
									for _, f3f1f3f1elemf1f1f2iter := range f3f1f3f1iter.RuleDefinition.MatchAttributes.Protocols {
										var f3f1f3f1elemf1f1f2elem int64
										f3f1f3f1elemf1f1f2elem = *f3f1f3f1elemf1f1f2iter
										f3f1f3f1elemf1f1f2 = append(f3f1f3f1elemf1f1f2, &f3f1f3f1elemf1f1f2elem)
									}
									f3f1f3f1elemf1f1.SetProtocols(f3f1f3f1elemf1f1f2)
								}
								if f3f1f3f1iter.RuleDefinition.MatchAttributes.SourcePorts != nil {
									f3f1f3f1elemf1f1f3 := []*svcsdk.PortRange{}
									for _, f3f1f3f1elemf1f1f3iter := range f3f1f3f1iter.RuleDefinition.MatchAttributes.SourcePorts {
										f3f1f3f1elemf1f1f3elem := &svcsdk.PortRange{}
										if f3f1f3f1elemf1f1f3iter.FromPort != nil {
											f3f1f3f1elemf1f1f3elem.SetFromPort(*f3f1f3f1elemf1f1f3iter.FromPort)
										}
										if f3f1f3f1elemf1f1f3iter.ToPort != nil {
											f3f1f3f1elemf1f1f3elem.SetToPort(*f3f1f3f1elemf1f1f3iter.ToPort)
										}
										f3f1f3f1elemf1f1f3 = append(f3f1f3f1elemf1f1f3, f3f1f3f1elemf1f1f3elem)
									}
									f3f1f3f1elemf1f1.SetSourcePorts(f3f1f3f1elemf1f1f3)
								}
								if f3f1f3f1iter.RuleDefinition.MatchAttributes.Sources != nil {
									f3f1f3f1elemf1f1f4 := []*svcsdk.Address{}
									for _, f3f1f3f1elemf1f1f4iter := range f3f1f3f1iter.RuleDefinition.MatchAttributes.Sources {
										f3f1f3f1elemf1f1f4elem := &svcsdk.Address{}
										if f3f1f3f1elemf1f1f4iter.AddressDefinition != nil {
											f3f1f3f1elemf1f1f4elem.SetAddressDefinition(*f3f1f3f1elemf1f1f4iter.AddressDefinition)
										}
										f3f1f3f1elemf1f1f4 = append(f3f1f3f1elemf1f1f4, f3f1f3f1elemf1f1f4elem)
									}
									f3f1f3f1elemf1f1.SetSources(f3f1f3f1elemf1f1f4)
								}
								if f3f1f3f1iter.RuleDefinition.MatchAttributes.TCPFlags != nil {
									f3f1f3f1elemf1f1f5 := []*svcsdk.TCPFlagField{}
									for _, f3f1f3f1elemf1f1f5iter := range f3f1f3f1iter.RuleDefinition.MatchAttributes.TCPFlags {
										f3f1f3f1elemf1f1f5elem := &svcsdk.TCPFlagField{}
										if f3f1f3f1elemf1f1f5iter.Flags != nil {
											f3f1f3f1elemf1f1f5elemf0 := []*string{}
											for _, f3f1f3f1elemf1f1f5elemf0iter := range f3f1f3f1elemf1f1f5iter.Flags {
												var f3f1f3f1elemf1f1f5elemf0elem string
												f3f1f3f1elemf1f1f5elemf0elem = *f3f1f3f1elemf1f1f5elemf0iter
												f3f1f3f1elemf1f1f5elemf0 = append(f3f1f3f1elemf1f1f5elemf0, &f3f1f3f1elemf1f1f5elemf0elem)
											}
											f3f1f3f1elemf1f1f5elem.SetFlags(f3f1f3f1elemf1f1f5elemf0)
										}
										if f3f1f3f1elemf1f1f5iter.Masks != nil {
											f3f1f3f1elemf1f1f5elemf1 := []*string{}
											for _, f3f1f3f1elemf1f1f5elemf1iter := range f3f1f3f1elemf1f1f5iter.Masks {
												var f3f1f3f1elemf1f1f5elemf1elem string
												f3f1f3f1elemf1f1f5elemf1elem = *f3f1f3f1elemf1f1f5elemf1iter
												f3f1f3f1elemf1f1f5elemf1 = append(f3f1f3f1elemf1f1f5elemf1, &f3f1f3f1elemf1f1f5elemf1elem)
											}
											f3f1f3f1elemf1f1f5elem.SetMasks(f3f1f3f1elemf1f1f5elemf1)
										}
										f3f1f3f1elemf1f1f5 = append(f3f1f3f1elemf1f1f5, f3f1f3f1elemf1f1f5elem)
									}
									f3f1f3f1elemf1f1.SetTCPFlags(f3f1f3f1elemf1f1f5)
								}
								f3f1f3f1elemf1.SetMatchAttributes(f3f1f3f1elemf1f1)
							}
							f3f1f3f1elem.SetRuleDefinition(f3f1f3f1elemf1)
						}
						f3f1f3f1 = append(f3f1f3f1, f3f1f3f1elem)
					}
					f3f1f3.SetStatelessRules(f3f1f3f1)
				}
				f3f1.SetStatelessRulesAndCustomActions(f3f1f3)
			}
			f3.SetRulesSource(f3f1)
		}
		res.SetRuleGroup(f3)
	}
	if cr.Spec.ForProvider.RuleGroupName != nil {
		res.SetRuleGroupName(*cr.Spec.ForProvider.RuleGroupName)
	}
	if cr.Spec.ForProvider.Rules != nil {
		res.SetRules(*cr.Spec.ForProvider.Rules)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f6 := []*svcsdk.Tag{}
		for _, f6iter := range cr.Spec.ForProvider.Tags {
			f6elem := &svcsdk.Tag{}
			if f6iter.Key != nil {
				f6elem.SetKey(*f6iter.Key)
			}
			if f6iter.Value != nil {
				f6elem.SetValue(*f6iter.Value)
			}
			f6 = append(f6, f6elem)
		}
		res.SetTags(f6)
	}
	if cr.Spec.ForProvider.Type != nil {
		res.SetType(*cr.Spec.ForProvider.Type)
	}

	return res
}

// GenerateUpdateRuleGroupInput returns an update input.
func GenerateUpdateRuleGroupInput(cr *svcapitypes.RuleGroup) *svcsdk.UpdateRuleGroupInput {
	res := &svcsdk.UpdateRuleGroupInput{}

	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.DryRun != nil {
		res.SetDryRun(*cr.Spec.ForProvider.DryRun)
	}
	if cr.Spec.ForProvider.RuleGroup != nil {
		f2 := &svcsdk.RuleGroup{}
		if cr.Spec.ForProvider.RuleGroup.RuleVariables != nil {
			f2f0 := &svcsdk.RuleVariables{}
			if cr.Spec.ForProvider.RuleGroup.RuleVariables.IPSets != nil {
				f2f0f0 := map[string]*svcsdk.IPSet{}
				for f2f0f0key, f2f0f0valiter := range cr.Spec.ForProvider.RuleGroup.RuleVariables.IPSets {
					f2f0f0val := &svcsdk.IPSet{}
					if f2f0f0valiter.Definition != nil {
						f2f0f0valf0 := []*string{}
						for _, f2f0f0valf0iter := range f2f0f0valiter.Definition {
							var f2f0f0valf0elem string
							f2f0f0valf0elem = *f2f0f0valf0iter
							f2f0f0valf0 = append(f2f0f0valf0, &f2f0f0valf0elem)
						}
						f2f0f0val.SetDefinition(f2f0f0valf0)
					}
					f2f0f0[f2f0f0key] = f2f0f0val
				}
				f2f0.SetIPSets(f2f0f0)
			}
			if cr.Spec.ForProvider.RuleGroup.RuleVariables.PortSets != nil {
				f2f0f1 := map[string]*svcsdk.PortSet{}
				for f2f0f1key, f2f0f1valiter := range cr.Spec.ForProvider.RuleGroup.RuleVariables.PortSets {
					f2f0f1val := &svcsdk.PortSet{}
					if f2f0f1valiter.Definition != nil {
						f2f0f1valf0 := []*string{}
						for _, f2f0f1valf0iter := range f2f0f1valiter.Definition {
							var f2f0f1valf0elem string
							f2f0f1valf0elem = *f2f0f1valf0iter
							f2f0f1valf0 = append(f2f0f1valf0, &f2f0f1valf0elem)
						}
						f2f0f1val.SetDefinition(f2f0f1valf0)
					}
					f2f0f1[f2f0f1key] = f2f0f1val
				}
				f2f0.SetPortSets(f2f0f1)
			}
			f2.SetRuleVariables(f2f0)
		}
		if cr.Spec.ForProvider.RuleGroup.RulesSource != nil {
			f2f1 := &svcsdk.RulesSource{}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList != nil {
				f2f1f0 := &svcsdk.RulesSourceList{}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.GeneratedRulesType != nil {
					f2f1f0.SetGeneratedRulesType(*cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.GeneratedRulesType)
				}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.TargetTypes != nil {
					f2f1f0f1 := []*string{}
					for _, f2f1f0f1iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.TargetTypes {
						var f2f1f0f1elem string
						f2f1f0f1elem = *f2f1f0f1iter
						f2f1f0f1 = append(f2f1f0f1, &f2f1f0f1elem)
					}
					f2f1f0.SetTargetTypes(f2f1f0f1)
				}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.Targets != nil {
					f2f1f0f2 := []*string{}
					for _, f2f1f0f2iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.RulesSourceList.Targets {
						var f2f1f0f2elem string
						f2f1f0f2elem = *f2f1f0f2iter
						f2f1f0f2 = append(f2f1f0f2, &f2f1f0f2elem)
					}
					f2f1f0.SetTargets(f2f1f0f2)
				}
				f2f1.SetRulesSourceList(f2f1f0)
			}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.RulesString != nil {
				f2f1.SetRulesString(*cr.Spec.ForProvider.RuleGroup.RulesSource.RulesString)
			}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.StatefulRules != nil {
				f2f1f2 := []*svcsdk.StatefulRule{}
				for _, f2f1f2iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.StatefulRules {
					f2f1f2elem := &svcsdk.StatefulRule{}
					if f2f1f2iter.Action != nil {
						f2f1f2elem.SetAction(*f2f1f2iter.Action)
					}
					if f2f1f2iter.Header != nil {
						f2f1f2elemf1 := &svcsdk.Header{}
						if f2f1f2iter.Header.Destination != nil {
							f2f1f2elemf1.SetDestination(*f2f1f2iter.Header.Destination)
						}
						if f2f1f2iter.Header.DestinationPort != nil {
							f2f1f2elemf1.SetDestinationPort(*f2f1f2iter.Header.DestinationPort)
						}
						if f2f1f2iter.Header.Direction != nil {
							f2f1f2elemf1.SetDirection(*f2f1f2iter.Header.Direction)
						}
						if f2f1f2iter.Header.Protocol != nil {
							f2f1f2elemf1.SetProtocol(*f2f1f2iter.Header.Protocol)
						}
						if f2f1f2iter.Header.Source != nil {
							f2f1f2elemf1.SetSource(*f2f1f2iter.Header.Source)
						}
						if f2f1f2iter.Header.SourcePort != nil {
							f2f1f2elemf1.SetSourcePort(*f2f1f2iter.Header.SourcePort)
						}
						f2f1f2elem.SetHeader(f2f1f2elemf1)
					}
					if f2f1f2iter.RuleOptions != nil {
						f2f1f2elemf2 := []*svcsdk.RuleOption{}
						for _, f2f1f2elemf2iter := range f2f1f2iter.RuleOptions {
							f2f1f2elemf2elem := &svcsdk.RuleOption{}
							if f2f1f2elemf2iter.Keyword != nil {
								f2f1f2elemf2elem.SetKeyword(*f2f1f2elemf2iter.Keyword)
							}
							if f2f1f2elemf2iter.Settings != nil {
								f2f1f2elemf2elemf1 := []*string{}
								for _, f2f1f2elemf2elemf1iter := range f2f1f2elemf2iter.Settings {
									var f2f1f2elemf2elemf1elem string
									f2f1f2elemf2elemf1elem = *f2f1f2elemf2elemf1iter
									f2f1f2elemf2elemf1 = append(f2f1f2elemf2elemf1, &f2f1f2elemf2elemf1elem)
								}
								f2f1f2elemf2elem.SetSettings(f2f1f2elemf2elemf1)
							}
							f2f1f2elemf2 = append(f2f1f2elemf2, f2f1f2elemf2elem)
						}
						f2f1f2elem.SetRuleOptions(f2f1f2elemf2)
					}
					f2f1f2 = append(f2f1f2, f2f1f2elem)
				}
				f2f1.SetStatefulRules(f2f1f2)
			}
			if cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions != nil {
				f2f1f3 := &svcsdk.StatelessRulesAndCustomActions{}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.CustomActions != nil {
					f2f1f3f0 := []*svcsdk.CustomAction{}
					for _, f2f1f3f0iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.CustomActions {
						f2f1f3f0elem := &svcsdk.CustomAction{}
						if f2f1f3f0iter.ActionDefinition != nil {
							f2f1f3f0elemf0 := &svcsdk.ActionDefinition{}
							if f2f1f3f0iter.ActionDefinition.PublishMetricAction != nil {
								f2f1f3f0elemf0f0 := &svcsdk.PublishMetricAction{}
								if f2f1f3f0iter.ActionDefinition.PublishMetricAction.Dimensions != nil {
									f2f1f3f0elemf0f0f0 := []*svcsdk.Dimension{}
									for _, f2f1f3f0elemf0f0f0iter := range f2f1f3f0iter.ActionDefinition.PublishMetricAction.Dimensions {
										f2f1f3f0elemf0f0f0elem := &svcsdk.Dimension{}
										if f2f1f3f0elemf0f0f0iter.Value != nil {
											f2f1f3f0elemf0f0f0elem.SetValue(*f2f1f3f0elemf0f0f0iter.Value)
										}
										f2f1f3f0elemf0f0f0 = append(f2f1f3f0elemf0f0f0, f2f1f3f0elemf0f0f0elem)
									}
									f2f1f3f0elemf0f0.SetDimensions(f2f1f3f0elemf0f0f0)
								}
								f2f1f3f0elemf0.SetPublishMetricAction(f2f1f3f0elemf0f0)
							}
							f2f1f3f0elem.SetActionDefinition(f2f1f3f0elemf0)
						}
						if f2f1f3f0iter.ActionName != nil {
							f2f1f3f0elem.SetActionName(*f2f1f3f0iter.ActionName)
						}
						f2f1f3f0 = append(f2f1f3f0, f2f1f3f0elem)
					}
					f2f1f3.SetCustomActions(f2f1f3f0)
				}
				if cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.StatelessRules != nil {
					f2f1f3f1 := []*svcsdk.StatelessRule{}
					for _, f2f1f3f1iter := range cr.Spec.ForProvider.RuleGroup.RulesSource.StatelessRulesAndCustomActions.StatelessRules {
						f2f1f3f1elem := &svcsdk.StatelessRule{}
						if f2f1f3f1iter.Priority != nil {
							f2f1f3f1elem.SetPriority(*f2f1f3f1iter.Priority)
						}
						if f2f1f3f1iter.RuleDefinition != nil {
							f2f1f3f1elemf1 := &svcsdk.RuleDefinition{}
							if f2f1f3f1iter.RuleDefinition.Actions != nil {
								f2f1f3f1elemf1f0 := []*string{}
								for _, f2f1f3f1elemf1f0iter := range f2f1f3f1iter.RuleDefinition.Actions {
									var f2f1f3f1elemf1f0elem string
									f2f1f3f1elemf1f0elem = *f2f1f3f1elemf1f0iter
									f2f1f3f1elemf1f0 = append(f2f1f3f1elemf1f0, &f2f1f3f1elemf1f0elem)
								}
								f2f1f3f1elemf1.SetActions(f2f1f3f1elemf1f0)
							}
							if f2f1f3f1iter.RuleDefinition.MatchAttributes != nil {
								f2f1f3f1elemf1f1 := &svcsdk.MatchAttributes{}
								if f2f1f3f1iter.RuleDefinition.MatchAttributes.DestinationPorts != nil {
									f2f1f3f1elemf1f1f0 := []*svcsdk.PortRange{}
									for _, f2f1f3f1elemf1f1f0iter := range f2f1f3f1iter.RuleDefinition.MatchAttributes.DestinationPorts {
										f2f1f3f1elemf1f1f0elem := &svcsdk.PortRange{}
										if f2f1f3f1elemf1f1f0iter.FromPort != nil {
											f2f1f3f1elemf1f1f0elem.SetFromPort(*f2f1f3f1elemf1f1f0iter.FromPort)
										}
										if f2f1f3f1elemf1f1f0iter.ToPort != nil {
											f2f1f3f1elemf1f1f0elem.SetToPort(*f2f1f3f1elemf1f1f0iter.ToPort)
										}
										f2f1f3f1elemf1f1f0 = append(f2f1f3f1elemf1f1f0, f2f1f3f1elemf1f1f0elem)
									}
									f2f1f3f1elemf1f1.SetDestinationPorts(f2f1f3f1elemf1f1f0)
								}
								if f2f1f3f1iter.RuleDefinition.MatchAttributes.Destinations != nil {
									f2f1f3f1elemf1f1f1 := []*svcsdk.Address{}
									for _, f2f1f3f1elemf1f1f1iter := range f2f1f3f1iter.RuleDefinition.MatchAttributes.Destinations {
										f2f1f3f1elemf1f1f1elem := &svcsdk.Address{}
										if f2f1f3f1elemf1f1f1iter.AddressDefinition != nil {
											f2f1f3f1elemf1f1f1elem.SetAddressDefinition(*f2f1f3f1elemf1f1f1iter.AddressDefinition)
										}
										f2f1f3f1elemf1f1f1 = append(f2f1f3f1elemf1f1f1, f2f1f3f1elemf1f1f1elem)
									}
									f2f1f3f1elemf1f1.SetDestinations(f2f1f3f1elemf1f1f1)
								}
								if f2f1f3f1iter.RuleDefinition.MatchAttributes.Protocols != nil {
									f2f1f3f1elemf1f1f2 := []*int64{}
									for _, f2f1f3f1elemf1f1f2iter := range f2f1f3f1iter.RuleDefinition.MatchAttributes.Protocols {
										var f2f1f3f1elemf1f1f2elem int64
										f2f1f3f1elemf1f1f2elem = *f2f1f3f1elemf1f1f2iter
										f2f1f3f1elemf1f1f2 = append(f2f1f3f1elemf1f1f2, &f2f1f3f1elemf1f1f2elem)
									}
									f2f1f3f1elemf1f1.SetProtocols(f2f1f3f1elemf1f1f2)
								}
								if f2f1f3f1iter.RuleDefinition.MatchAttributes.SourcePorts != nil {
									f2f1f3f1elemf1f1f3 := []*svcsdk.PortRange{}
									for _, f2f1f3f1elemf1f1f3iter := range f2f1f3f1iter.RuleDefinition.MatchAttributes.SourcePorts {
										f2f1f3f1elemf1f1f3elem := &svcsdk.PortRange{}
										if f2f1f3f1elemf1f1f3iter.FromPort != nil {
											f2f1f3f1elemf1f1f3elem.SetFromPort(*f2f1f3f1elemf1f1f3iter.FromPort)
										}
										if f2f1f3f1elemf1f1f3iter.ToPort != nil {
											f2f1f3f1elemf1f1f3elem.SetToPort(*f2f1f3f1elemf1f1f3iter.ToPort)
										}
										f2f1f3f1elemf1f1f3 = append(f2f1f3f1elemf1f1f3, f2f1f3f1elemf1f1f3elem)
									}
									f2f1f3f1elemf1f1.SetSourcePorts(f2f1f3f1elemf1f1f3)
								}
								if f2f1f3f1iter.RuleDefinition.MatchAttributes.Sources != nil {
									f2f1f3f1elemf1f1f4 := []*svcsdk.Address{}
									for _, f2f1f3f1elemf1f1f4iter := range f2f1f3f1iter.RuleDefinition.MatchAttributes.Sources {
										f2f1f3f1elemf1f1f4elem := &svcsdk.Address{}
										if f2f1f3f1elemf1f1f4iter.AddressDefinition != nil {
											f2f1f3f1elemf1f1f4elem.SetAddressDefinition(*f2f1f3f1elemf1f1f4iter.AddressDefinition)
										}
										f2f1f3f1elemf1f1f4 = append(f2f1f3f1elemf1f1f4, f2f1f3f1elemf1f1f4elem)
									}
									f2f1f3f1elemf1f1.SetSources(f2f1f3f1elemf1f1f4)
								}
								if f2f1f3f1iter.RuleDefinition.MatchAttributes.TCPFlags != nil {
									f2f1f3f1elemf1f1f5 := []*svcsdk.TCPFlagField{}
									for _, f2f1f3f1elemf1f1f5iter := range f2f1f3f1iter.RuleDefinition.MatchAttributes.TCPFlags {
										f2f1f3f1elemf1f1f5elem := &svcsdk.TCPFlagField{}
										if f2f1f3f1elemf1f1f5iter.Flags != nil {
											f2f1f3f1elemf1f1f5elemf0 := []*string{}
											for _, f2f1f3f1elemf1f1f5elemf0iter := range f2f1f3f1elemf1f1f5iter.Flags {
												var f2f1f3f1elemf1f1f5elemf0elem string
												f2f1f3f1elemf1f1f5elemf0elem = *f2f1f3f1elemf1f1f5elemf0iter
												f2f1f3f1elemf1f1f5elemf0 = append(f2f1f3f1elemf1f1f5elemf0, &f2f1f3f1elemf1f1f5elemf0elem)
											}
											f2f1f3f1elemf1f1f5elem.SetFlags(f2f1f3f1elemf1f1f5elemf0)
										}
										if f2f1f3f1elemf1f1f5iter.Masks != nil {
											f2f1f3f1elemf1f1f5elemf1 := []*string{}
											for _, f2f1f3f1elemf1f1f5elemf1iter := range f2f1f3f1elemf1f1f5iter.Masks {
												var f2f1f3f1elemf1f1f5elemf1elem string
												f2f1f3f1elemf1f1f5elemf1elem = *f2f1f3f1elemf1f1f5elemf1iter
												f2f1f3f1elemf1f1f5elemf1 = append(f2f1f3f1elemf1f1f5elemf1, &f2f1f3f1elemf1f1f5elemf1elem)
											}
											f2f1f3f1elemf1f1f5elem.SetMasks(f2f1f3f1elemf1f1f5elemf1)
										}
										f2f1f3f1elemf1f1f5 = append(f2f1f3f1elemf1f1f5, f2f1f3f1elemf1f1f5elem)
									}
									f2f1f3f1elemf1f1.SetTCPFlags(f2f1f3f1elemf1f1f5)
								}
								f2f1f3f1elemf1.SetMatchAttributes(f2f1f3f1elemf1f1)
							}
							f2f1f3f1elem.SetRuleDefinition(f2f1f3f1elemf1)
						}
						f2f1f3f1 = append(f2f1f3f1, f2f1f3f1elem)
					}
					f2f1f3.SetStatelessRules(f2f1f3f1)
				}
				f2f1.SetStatelessRulesAndCustomActions(f2f1f3)
			}
			f2.SetRulesSource(f2f1)
		}
		res.SetRuleGroup(f2)
	}
	if cr.Spec.ForProvider.RuleGroupName != nil {
		res.SetRuleGroupName(*cr.Spec.ForProvider.RuleGroupName)
	}
	if cr.Spec.ForProvider.Rules != nil {
		res.SetRules(*cr.Spec.ForProvider.Rules)
	}
	if cr.Spec.ForProvider.Type != nil {
		res.SetType(*cr.Spec.ForProvider.Type)
	}
	if cr.Status.AtProvider.UpdateToken != nil {
		res.SetUpdateToken(*cr.Status.AtProvider.UpdateToken)
	}

	return res
}

// GenerateDeleteRuleGroupInput returns a deletion input.
func GenerateDeleteRuleGroupInput(cr *svcapitypes.RuleGroup) *svcsdk.DeleteRuleGroupInput {
	res := &svcsdk.DeleteRuleGroupInput{}

	if cr.Spec.ForProvider.RuleGroupName != nil {
		res.SetRuleGroupName(*cr.Spec.ForProvider.RuleGroupName)
	}
	if cr.Spec.ForProvider.Type != nil {
		res.SetType(*cr.Spec.ForProvider.Type)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
